<Project>
  <Target Name="IronSchemeBuildTools">
    <MSBuild Projects="$(MSBuildThisFileDirectory)../Setup/Setup.csproj" Properties="TargetFramework=$(IronSchemeBuildToolsTargetFramework)"/>
    <MSBuild Projects="$(MSBuildThisFileDirectory)../IronScheme.Build/IronScheme.Build.csproj" Properties="TargetFramework=netstandard2.0" />
  </Target>

  <PropertyGroup>
    <IronSchemeBuildAssemblyFile>$(MSBuildThisFileDirectory)IronScheme.Build.dll</IronSchemeBuildAssemblyFile>
  </PropertyGroup>

  <!-- tools -->
  <UsingTask TaskName="IronScheme.Build.NamespaceRenamer" AssemblyFile="$(IronSchemeBuildAssemblyFile)" />
  <UsingTask TaskName="IronScheme.Build.ReferenceRemover" AssemblyFile="$(IronSchemeBuildAssemblyFile)" />
  <UsingTask TaskName="IronScheme.Build.Gplex" AssemblyFile="$(IronSchemeBuildAssemblyFile)" />
  <UsingTask TaskName="IronScheme.Build.Gppg" AssemblyFile="$(IronSchemeBuildAssemblyFile)" />
  <UsingTask TaskName="IronScheme.Build.EmbedResources" AssemblyFile="$(IronSchemeBuildAssemblyFile)" />
  <UsingTask TaskName="IronScheme.Build.RuntimeChanger" AssemblyFile="$(IronSchemeBuildAssemblyFile)" />
  <UsingTask TaskName="IronScheme.Build.TailCallMaker" AssemblyFile="$(IronSchemeBuildAssemblyFile)" />
  <UsingTask TaskName="IronScheme.Build.ILDasm" AssemblyFile="$(IronSchemeBuildAssemblyFile)" />
  <UsingTask TaskName="IronScheme.Build.ILAsm" AssemblyFile="$(IronSchemeBuildAssemblyFile)" />
  <UsingTask TaskName="IronScheme.Build.ILRepack" AssemblyFile="$(IronSchemeBuildAssemblyFile)" />

  <ItemDefinitionGroup>
    <AllOutput>
      <PalAssembly>%(Identity)IronScheme.FrameworkPAL.dll</PalAssembly>
    </AllOutput>
  </ItemDefinitionGroup>

  <Target Name="Package" Condition="$(MSBuildProjectName) == 'IronScheme.Console'">
    <Message Importance="High" Text="Lets start packaging: $(MSBuildProjectName)"/>

    <PropertyGroup>
      <_OutDir>$(MSBuildProjectDirectory)\$(OutputPath)</_OutDir>
      <Net20OutputDir>$(_OutDir)net20\</Net20OutputDir>
      <Core21OutputDir>$(_OutDir)netcoreapp2.1\</Core21OutputDir>
      <Net90OutputDir>$(_OutDir)net9.0\</Net90OutputDir>
      <Monolith>$(Net20OutputDir)IronScheme.dll</Monolith>
      <ConsoleExeTemplate>$(Net20OutputDir)IronScheme.Console</ConsoleExeTemplate>
    </PropertyGroup>

    <PropertyGroup Condition="$([MSBuild]::IsOsUnixLike()) == 'True'">
      <BootstrapDir>$(Net90OutputDir)</BootstrapDir>
      <IronScheme>$(BootstrapDir)IronScheme.ConsoleCore</IronScheme>
    </PropertyGroup>

    <PropertyGroup Condition="$([MSBuild]::IsOsUnixLike()) != 'True'">
      <BootstrapDir>$(Net20OutputDir)</BootstrapDir>
      <IronScheme>$(BootstrapDir)IronScheme.Console.exe</IronScheme>
    </PropertyGroup>

    <Exec Command="$(IronScheme) -debug ironscheme-buildscript.sps" WorkingDirectory="$(BootstrapDir)" />
    <Exec Command="echo '1' | $(IronScheme) -debug" WorkingDirectory="$(BootstrapDir)" />

    <Copy Condition="$([MSBuild]::IsOsUnixLike()) == 'True'" SourceFiles="$(BootstrapDir)ironscheme.boot.dll" DestinationFolder="$(Net20OutputDir)" />
    <Copy Condition="$([MSBuild]::IsOsUnixLike()) == 'True'" SourceFiles="$(BootstrapDir)ironscheme.boot.pdb" DestinationFolder="$(Net20OutputDir)" />

    <RemoveDir Directories="$(Net20OutputDir)merged" />
    <MakeDir Directories="$(Net20OutputDir)merged" />

    <ItemGroup>
      <AllOutput Include="$(Net20OutputDir);$(Core21OutputDir);$(Net90OutputDir)" />
      <PalRename Include="@(AllOutput)" Source="Microsoft" TargetNS="IronScheme" />
    </ItemGroup>

    <ReferenceRemover Input="%(AllOutput.PalAssembly)" Include="IronScheme\.Scripting" Target="$(Monolith)" />
    <NamespaceRenamer Input="%(AllOutput.PalAssembly)" References="true" Renames="@(PalRename)" />

    <ILRepack Output="$(Net90OutputDir)net9-IronScheme.FrameworkPAL.dll" Input="$(Net90OutputDir)IronScheme.FrameworkPAL.dll;$(Net90OutputDir)System.Runtime.Serialization.Formatters.dll" />

    <ItemGroup>
      <Embeds Include="$(Net20OutputDir)IronScheme.FrameworkPAL.dll" />
      <Embeds Include="$(Core21OutputDir)IronScheme.FrameworkPAL.dll" Name="core-IronScheme.FrameworkPAL.dll" />
      <Embeds Include="$(Net90OutputDir)net9-IronScheme.FrameworkPAL.dll" />
    </ItemGroup>

    <EmbedResources Input="$(Monolith)" Resources="@(Embeds)" />

    <ItemGroup>
      <MonolithInput Include="$(Monolith);$(Net20OutputDir)IronScheme.Closures.dll;$(Net20OutputDir)IronScheme.Scripting.dll;$(Net20OutputDir)Oyster.IntX.dll;$(Net20OutputDir)ironscheme.boot.dll" />
    </ItemGroup>

    <ILRepack Output="$(Net20OutputDir)merged/IronScheme.dll" Input="@(MonolithInput)" />

    <Copy SourceFolders="$(Net20OutputDir)merged/" DestinationFolder="$(Net20OutputDir)" />

    <ItemGroup>
      <FinalRename Include="1" Source="Microsoft" TargetNS="IronScheme" />
      <FinalRename Include="2" Source="Oyster.Math" TargetNS="IronScheme.Scripting.Math" />
      <FinalRename Include="3" Source="gppg" TargetNS="IronScheme.gppg" />
    </ItemGroup>

    <NamespaceRenamer Input="$(Monolith)" Renames="@(FinalRename)" />
    <ReferenceRemover Input="$(Core21OutputDir)IronScheme.ConsoleCore.dll" Include="IronScheme\.Closures" Target="$(Monolith)" />

    <RuntimeChanger Input="$(ConsoleExeTemplate).exe" Output="$(ConsoleExeTemplate)32-v2.exe" Required32Bit="true" />
    <RuntimeChanger Input="$(ConsoleExeTemplate).exe" Output="$(ConsoleExeTemplate)32-v4.exe" TargetRuntime="v4" Required32Bit="true" />
    <RuntimeChanger Input="$(ConsoleExeTemplate).exe" Output="$(ConsoleExeTemplate)-v2.exe" />
    <RuntimeChanger Input="$(ConsoleExeTemplate).exe" Output="$(ConsoleExeTemplate)-v4.exe" TargetRuntime="v4"/>

    <PropertyGroup>
      <InstallStagePre>$(Net20OutputDir)install-stage\</InstallStagePre>
      <InstallStage>$(InstallStagePre)IronScheme</InstallStage>
    </PropertyGroup>

    <ItemGroup>
      <InstallFiles Include="$(ConsoleExeTemplate)32-v2.exe;$(ConsoleExeTemplate)32-v4.exe;$(ConsoleExeTemplate)-v2.exe;$(ConsoleExeTemplate)-v4.exe"/>
      <InstallFiles Include="$(Core21OutputDir)IronScheme.ConsoleCore.dll;$(Core21OutputDir)IronScheme.ConsoleCore.runtimeconfig.json"/>
      <InstallFiles Condition="$([MSBuild]::IsOsUnixLike()) == 'True'" Include="$(Net90OutputDir)IronScheme.ConsoleCore" />
      <InstallFiles Condition="$([MSBuild]::IsOsUnixLike()) != 'True'" Include="$(Net90OutputDir)IronScheme.ConsoleCore.exe" />
      <InstallFiles Include="$(Net20OutputDir)system-libraries.ss;$(Net20OutputDir)system-libraries.srfi.ss" />
      <InstallFiles Include="$(Monolith)" />
    </ItemGroup>

    <RemoveDir Directories="$(InstallStage)" />
    <MakeDir Directories="$(InstallStage)" />

    <Copy SourceFiles="@(InstallFiles)" DestinationFolder="$(InstallStage)" />
    <Copy SourceFolders="$(MSBuildProjectDirectory)\examples\" DestinationFolder="$(InstallStage)\examples\" />
    <Copy SourceFolders="$(MSBuildProjectDirectory)\docs\" DestinationFolder="$(InstallStage)\docs\" />
    <Copy SourceFolders="$(MSBuildProjectDirectory)\lib\" DestinationFolder="$(InstallStage)\lib\" />
    <Copy SourceFolders="$(MSBuildProjectDirectory)\tests\" DestinationFolder="$(InstallStage)\tests\" />

    <ItemGroup>
      <Deleteme Include="$(InstallStage)lib\minikanren\mktests.scm" />
      <Deleteme Include="$(InstallStage)lib\pfds\tests.scm" />
      <Deleteme Include="$(InstallStage)tests\*.sps" />
      <Deleteme Include="$(InstallStage)lib\wak\fmt\private\test*.scm" />
      <Deleteme Include="$(InstallStage)lib\wak\foof-loop\private\test-foof-loop.scm" />
      <Deleteme Include="$(InstallStage)IronScheme.ConsoleCore.pdb" />
      <DeleteDir Include="$(InstallStage)lib\srfi\tests" />
      <DeleteDir Include="$(InstallStage)docs\notes" />
    </ItemGroup>

    <Delete Files="@(Deleteme)" />
    <RemoveDir Directories="@(DeleteDir)" />

    <ZipDirectory SourceDirectory="$(InstallStage)" Overwrite="True" DestinationFile="$(InstallStagePre)IronScheme-latest.zip" />

    <Copy SourceFiles="$(Net20OutputDir)IronScheme.pdb" DestinationFolder="$(InstallStage)" />

    <ZipDirectory SourceDirectory="$(InstallStage)" Overwrite="True" DestinationFile="$(InstallStagePre)IronScheme-latest-DEBUG.zip" />

    <Message Importance="High" Text="Packaging done. Files are in: $(InstallStagePre)"/>

  </Target>

  <Target Name="CommonClean" BeforeTargets="Clean">
    <Delete Files="@(GppgFile->'%(OutputFile)')" />
    <Delete Files="@(GplexFile->'%(OutputFile)')" />
  </Target>
  
  <!-- gplex -->

  <!-- Defaults for GplexFile items -->
  <ItemDefinitionGroup>
    <GplexFile>
      <OutputFile>%(Identity).cs</OutputFile>
    </GplexFile>
  </ItemDefinitionGroup>
  
  <!-- Run once from outer build in cross targeting projects. -->
  <Target Name="GplexToolCrossTarget" BeforeTargets="DispatchToInnerBuilds" Condition="'$(IsCrossTargetingBuild)' != ''" Inputs="@(GplexFile)" Outputs="@(GplexFile->'%(OutputFile)')">
    <CallTarget Targets="GplexTool" />
  </Target>

  <!-- Run once in single targeting projects. -->
  <!-- Don't run in VS design time builds. Otherwise VS compiles eagerly and discards the output -->
  <Target Name="GplexToolSingleTarget" BeforeTargets="CoreCompile" Condition="'$(DesignTimeBuild)' == '' AND '$(IsCrossTargetingBuild)' == ''" Inputs="@(GplexFile)" Outputs="@(GplexFile->'%(OutputFile)')">
    <CallTarget Targets="GplexTool" />
  </Target>
  
  <Target Name="GplexTool" DependsOnTargets="IronSchemeBuildTools">
    <Gplex Stack="true" Frame="$(SolutionDir)tools/gplexx.frame" InputFile="%(GplexFile.Identity)" OutputFile="%(GplexFile.OutputFile)" />

    <!-- Ensure the generated files are included in the build. Otherwise first build fails because the source files are collected already -->
    <ItemGroup>
      <Compile Remove="@(GplexFile->'%(OutputFile)')" />
      <Compile Include="@(GplexFile->'%(OutputFile)')" />
    </ItemGroup>
  </Target>

  <!-- Make it work with VS' FastUpToDateCheck -->
  <ItemGroup>
    <UpToDateCheckInput Include="@(GplexFile)" />
  </ItemGroup>

  <!-- gppg -->

  <!-- Defaults for GppgFile items -->
  <ItemDefinitionGroup>
    <GppgFile>
      <OutputFile>%(Identity).cs</OutputFile>
    </GppgFile>
  </ItemDefinitionGroup>

  <!-- Run once from outer build in cross targeting projects. -->
  <Target Name="GppgToolCrossTarget" BeforeTargets="DispatchToInnerBuilds" Condition="'$(IsCrossTargetingBuild)' != ''" Inputs="@(GppgFile)" Outputs="@(GppgFile->'%(OutputFile)')">
    <CallTarget Targets="GppgTool"  />
  </Target>

  <!-- Run once in single targeting projects. -->
  <!-- Don't run in VS design time builds. Otherwise VS compiles eagerly and discards the output -->
  <Target Name="GppgToolSingleTarget" BeforeTargets="CoreCompile" Condition="'$(DesignTimeBuild)' == '' AND '$(IsCrossTargetingBuild)' == ''" Inputs="@(GppgFile)" Outputs="@(GppgFile->'%(OutputFile)')">
    <CallTarget Targets="GppgTool" />
  </Target>

  <Target Name="GppgTool" DependsOnTargets="IronSchemeBuildTools">
    <Gppg Gplex="true" InputFile="%(GppgFile.Identity)" OutputFile="%(GppgFile.OutputFile)" />

    <!-- Ensure the generated files are included in the build. Otherwise first build fails because the source files are collected already -->
    <ItemGroup>
      <Compile Remove="@(GppgFile->'%(OutputFile)')" />
      <Compile Include="@(GppgFile->'%(OutputFile)')"  />
    </ItemGroup>
  </Target>

  <!-- Make it work with VS' FastUpToDateCheck -->
  <ItemGroup>
    <UpToDateCheckInput Include="@(GppgFile)" />
  </ItemGroup>

</Project>