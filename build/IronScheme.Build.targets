<Project>
  <Target Name="IronSchemeBuildTools">
    <MSBuild Projects="$(MSBuildThisFileDirectory)../Setup/Setup.csproj" Properties="TargetFramework=$(IronSchemeBuildToolsTargetFramework)"/>
    <MSBuild Projects="$(MSBuildThisFileDirectory)../IronScheme.Build/IronScheme.Build.csproj" Properties="TargetFramework=netstandard2.0" />
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)IronScheme.Build.tasks" />

  <Import Project="$(MSBuildThisFileDirectory)IronScheme.Package.targets" />

  <Target Name="CommonClean" BeforeTargets="Clean">
    <Delete Files="@(GppgFile->'%(OutputFile)')" />
    <Delete Files="@(GplexFile->'%(OutputFile)')" />
  </Target>
  
  <!-- gplex -->

  <!-- Defaults for GplexFile items -->
  <ItemDefinitionGroup>
    <GplexFile>
      <OutputFile>%(Identity).cs</OutputFile>
    </GplexFile>
  </ItemDefinitionGroup>
  
  <!-- Run once from outer build in cross targeting projects. -->
  <Target Name="GplexToolCrossTarget" BeforeTargets="DispatchToInnerBuilds" Condition="'$(IsCrossTargetingBuild)' != ''" Inputs="@(GplexFile)" Outputs="@(GplexFile->'%(OutputFile)')">
    <CallTarget Targets="GplexTool" />
  </Target>

  <!-- Run once in single targeting projects. -->
  <!-- Don't run in VS design time builds. Otherwise VS compiles eagerly and discards the output -->
  <Target Name="GplexToolSingleTarget" BeforeTargets="CoreCompile" Condition="'$(DesignTimeBuild)' == '' AND '$(IsCrossTargetingBuild)' == ''" Inputs="@(GplexFile)" Outputs="@(GplexFile->'%(OutputFile)')">
    <CallTarget Targets="GplexTool" />
  </Target>
  
  <Target Name="GplexTool" DependsOnTargets="IronSchemeBuildTools">
    <Gplex Stack="true" Frame="$(SolutionDir)tools/gplexx.frame" InputFile="%(GplexFile.Identity)" OutputFile="%(GplexFile.OutputFile)" />

    <!-- Ensure the generated files are included in the build. Otherwise first build fails because the source files are collected already -->
    <ItemGroup>
      <Compile Remove="@(GplexFile->'%(OutputFile)')" />
      <Compile Include="@(GplexFile->'%(OutputFile)')" />
    </ItemGroup>
  </Target>

  <!-- Make it work with VS' FastUpToDateCheck -->
  <ItemGroup>
    <UpToDateCheckInput Include="@(GplexFile)" />
  </ItemGroup>

  <!-- gppg -->

  <!-- Defaults for GppgFile items -->
  <ItemDefinitionGroup>
    <GppgFile>
      <OutputFile>%(Identity).cs</OutputFile>
    </GppgFile>
  </ItemDefinitionGroup>

  <!-- Run once from outer build in cross targeting projects. -->
  <Target Name="GppgToolCrossTarget" BeforeTargets="DispatchToInnerBuilds" Condition="'$(IsCrossTargetingBuild)' != ''" Inputs="@(GppgFile)" Outputs="@(GppgFile->'%(OutputFile)')">
    <CallTarget Targets="GppgTool"  />
  </Target>

  <!-- Run once in single targeting projects. -->
  <!-- Don't run in VS design time builds. Otherwise VS compiles eagerly and discards the output -->
  <Target Name="GppgToolSingleTarget" BeforeTargets="CoreCompile" Condition="'$(DesignTimeBuild)' == '' AND '$(IsCrossTargetingBuild)' == ''" Inputs="@(GppgFile)" Outputs="@(GppgFile->'%(OutputFile)')">
    <CallTarget Targets="GppgTool" />
  </Target>

  <Target Name="GppgTool" DependsOnTargets="IronSchemeBuildTools">
    <Gppg Gplex="true" InputFile="%(GppgFile.Identity)" OutputFile="%(GppgFile.OutputFile)" />

    <!-- Ensure the generated files are included in the build. Otherwise first build fails because the source files are collected already -->
    <ItemGroup>
      <Compile Remove="@(GppgFile->'%(OutputFile)')" />
      <Compile Include="@(GppgFile->'%(OutputFile)')"  />
    </ItemGroup>
  </Target>

  <!-- Make it work with VS' FastUpToDateCheck -->
  <ItemGroup>
    <UpToDateCheckInput Include="@(GppgFile)" />
  </ItemGroup>

</Project>